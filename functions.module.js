
import {
    O_rs_file, 
    O_code_autoextended
} from './classes.module.js'


let f_o_code_autoextended__from_s = function(s){

    let o_code_autoextended = new O_code_autoextended();
    o_code_autoextended.s_original = s

    let a_s__to_extend = []
    let a_s_line = s.split('\n');
    let a_s_line__without_auto_extended = [] 
    
    let s_start_tag__extended = '//extend_start'
    let s_end_tag__extended = '//extend_end'
    
    let s_start_tag__autoextended = '//extended_start_autgenerated'
    let s_end_tag__autoextended = '//extended_end_autgenerated'
    let b_tag_open = false;
    for(let s_line of a_s_line){
        if(s_line.trim().indexOf(s_start_tag__autoextended) == 0){
            b_tag_open = true;
        }
        if(!b_tag_open){
            a_s_line__without_auto_extended.push(s_line);
        }
        if(s_line.trim().indexOf(s_end_tag__autoextended) == 0){
            b_tag_open = false;
        }
    }
    
    
    o_code_autoextended.a_o_rs_file = []
    let n_start_tag_js_function = '////'
    
    let s_comment_ts_autogen = `${new Date().toString()},(${new Date().getTime()})`;
    o_code_autoextended.s_autoextended = `//This file was automatically generated on ${s_comment_ts_autogen}\n`
    let s__to_extend = ''
    let b_extend = false;
    let s_f_s = ''
    let a_s_code = []

    
    let o_rs_file = null;
    
    for(let s_line of a_s_line__without_auto_extended){

        o_code_autoextended.s_autoextended += s_line+'\n';
    
        if(s_line.trim().indexOf(s_start_tag__extended) == 0){
            let a_s = s_line.trim().split(":");
            let s_path_file_rel = a_s?.[1]?.trim()
            if(s_path_file_rel && s_path_file_rel!= ''){
            
                let o_rs_file__existing = o_code_autoextended.a_o_rs_file.find(o=>o.s_path_file == s_path_file_rel);
                
                if(o_rs_file__existing){
                    o_rs_file = o_rs_file__existing
                }else{
    
                    o_rs_file = new O_rs_file(
                        false,
                        s_path_file_rel, 
                        []
                    )
                    o_code_autoextended.a_o_rs_file.push(o_rs_file)
                }
                
            }
    
            b_extend = true
            s_f_s = ''
            a_s_code = []
            
        }
        if(b_extend){
            s__to_extend+=`${s_line}\n`
            if(
                s_line.trim().indexOf(s_start_tag__extended) != 0
                &&
                s_line.trim().indexOf(n_start_tag_js_function) != 0
                &&
                s_line.trim().indexOf(s_end_tag__extended) != 0 
            ){
                a_s_code.push(s_line)
            }
            if(s_line.trim().indexOf(n_start_tag_js_function) == 0){
                let n_idx = s_line.indexOf(n_start_tag_js_function);
                s_f_s+=s_line.substring(n_idx+n_start_tag_js_function.length)+'\n'
            }
    
            if(s_line.trim().indexOf(s_end_tag__extended) == 0){
                let f_s = new Function('s_code', s_f_s);
                let s_extended = f_s(a_s_code.join('\n'));
                let s_autogenerated = `${[`${s_start_tag__autoextended} on ${s_comment_ts_autogen} exact (${new Date().getTime()})`, s_extended, s_end_tag__autoextended].join('\n')}`
                o_code_autoextended.s_autoextended += `${s_autogenerated}\n`
                if(o_rs_file){
                    o_rs_file.a_s_rs.push(
                        s_autogenerated
                    )
                }
                a_s__to_extend.push(s__to_extend)
                b_extend = false;
            }
        }
    }

    return o_code_autoextended
}

export {
    f_o_code_autoextended__from_s
}